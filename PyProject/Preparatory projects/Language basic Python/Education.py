# # Вывод информации в терминал
# name = 'Alex'
# age = 6
# print(name, age)


# # sep= Сепаратор - заменяет пробел на указанный символ при выводе информации
# print(name, age, sep='*')


# # end= Разделитель - разделяет данные указанным символом, вместо использования переноса
# print(name, end=';')
# print(age, end=';')
# print('stroka')


# # Ввод данных input()
# name = input('Как тебя зовут?: ')
# print('Привет, ', name, '!')


# # / - деление дробное

# # // - целая часть часть от деления

# # % - остаток от деления

# # ** - возведение в степень

# # == - равно

# # != - не равно

# # > - больше

# # < - меньше

# # >= - больше либо равно

# # <= - меньше либо равно


# # Сложные логические выражения:
# and - И
# or - ИЛИ
# not - НЕ


# # Оператор if, elif и else
# age = int(input('Сколько вам лет?: '))
# if age < 18:
#     print('Доступ запрещен!!!')
# elif age == 18:
#     print('Ну, и что же с вами делать?')
# elif age > 18 and age < 25:
#     print('Вы в определенной категории лиц, будьте осторожны)')
# else:
#     print('Доступ разрешен)))')
#     if age % 5 == 0:
#         print('У вас юбилей, с ума сойти можно)')
# print("Какие-то действия")
# print("Конец")


# # Цикл while - пока условие выполняется (True): делать определенный набор дейтствий
# user = input('Кто создатель python?: ')
# while user != 'Гвидо':
#     print('NO!')
#     user = input('Кто создатель python?: ')
# print('YES!!!')


# # break - выход из цикла и не важно выполнилось условие или нет
# user = None
# while user != 'Гвидо':
#     user = input('Кто создатель python?: ')
#     if user == 'Гвидо':
#         break
#     print('NO!')
# print('YES!!!')


# # continue - переход на следующую итерацию (запускаем цикл заново)
#   цикла (команды в цикле после continue не выполняются)
# numbers = 0
# user_number = int(input('Введите число: '))
# while numbers <= user_number:
#     if numbers % 2 != 0:
#         numbers += 1
#         continue
#     print(numbers)
#     numbers += 1


# # while-else - в блоке else (после while) мы выполняем действия после того как вышли из цикла while
#     когда условие цикла стало неверным (False), только по истечению условия цикла, а ни каким другим путем
# number = 0
# while number <= 100:
#     print(number)
#     number += 1
#     # if number == 33:
#     #     break
# else:
#     print('else - end')
# print('end')


# # Строка - str
#   Состоит из набора символов
#   Можно получить символ по индексу friend[1]
#   Индексы начинаются с 0
#   В python можно использовать отрицательные индексы friend[-2]


# # Срезы - можно получить несколько символов (часть строки)
#   friend[start:end] - friend[1:6],  1 - с какого символа начать, 4 - по какой символ
#   friend[:6] - с начала строки до какого-то элемента
#   friend[3:] - с какого-то элемента до конца строки


# # Функция len и методы строки
#   len(friend) - сколько символов в строке
#   friend.find('a') - ищем символ "а" в строке
#   friend.split() - преобразование в список через пробел, в скобках указать какой разделитель использовать
#   'Max Leo' - ['Max', 'Leo']
#   friend.isdigit() - проверка состоит ли строка только из цифр
#   friend.upper() - приведение строки в вверхний регистр
#   friend.lower() - приведение строки в нижний регистр
#   friend.count('a', start_index, end_index) - сколько раз повторяется в строке искомый символ


# # Форматирование строк
# name = 'Leo'
# age = 30
# 1. конкатенация
# hello_str = 'Привет ' + name + ' тебе ' + str(age) + ' лет'
# print(hello_str)
# 2. %
# hello_str = 'Привет %s тебе %d лет'%(name, age)
# print(hello_str)
# 3. format()
# hello_str = 'Привет {} тебе {} лет'.format(name, age)
# print(hello_str)


# # list (списки) - упорядоченные изменяемые коллекции объектов произвольных типов
#   some_list = ['hello', 123, True]
#   Чаще всего содержит элементы одного типа (например имена друзей)
#   friends = ['Leo', 'Max', 'Kate']
#   Можно объявить пустой список или заполненный
#   В списке доступны индексы с 0
#   Также можно применять срезы


# # Функция len и методы списка
# len(friends) - узнать кол-во элементов в списке
# friends.append('Ron') - добавление нового элемента в список
# friends.pop() - удаляет последний элемент из списка и возвращает его (запоминает и дальше его можно использовать)
# friends.clear - очищает весь список
# friends.remove('Ron') - удаление элемента из списка
# del friends[0] - удаление элемента по индексу
# friends.reverse() - переворачивает содержимое в списке (первое становится последним)
# sorted(friends) - сортировка списка (в данном случае по алфавиту)


# # Оператор in
#   Позволяет проверить наличие элемента в списке или строке
#   'Max' in friedns
#   'S' in 'Superman'
#   Результат True или False


# # tuple (кортеж) - список который нельзя изменять
#   Записывается в круглых скобках
#   roles = ('user', 'manager', 'admin')
#   служит для защиты от изменений


# # Последовательность
#   Контейнер, элементы которого представляют собой некую послеовательность
#   Могут быть как изменяемыми (список), так и неизменяемыми (кортеж, строка)
#   Реализуют определенные методы (доступна индексация, взятие длины, можно использовать цикл for)


# # Цикл for - позволяет перебирать элементы по порядку без указания индекса
#   for friend in friends:
#       print(friend)
#   Заканчивает выполнение, когда заканчивается полседовательность элементов
#   Позволяет совершать меньше ошибок при переборе элементов


# # Функция range
#   Позволяет создать последовательность  целых чисел
#   Чаще всего используется с циклм for
# winners = ['Max', 'Leo', 'Kate']
# for i in range(len(winners)):
#     print(i+1, ') ', winners[i])


# # Параметры функции range
#   range(start_or_stop, stop, step)
#   start_or_stop - начало или конец последовательности
#   stop - конец
#   step - шаг
# print(list(range(1, 1000, 4)))


# # for vs for range vs while
#   for - перебор последовательности. Индекс не нужен
#   for range - перебор последовательности. Индекс нужен
#   for range - необходимо пропустить некоторые последовательности или идти из конца в начало
#   while - цикл связан с условием, но не с последовательностью


# # Словарь dict
#   Неупорядоченные коллекции произвольных объектов с доступом по ключу
#   my_dict = {key1: val1, key2, val2, ...}
#   dog = {'name': 'Rocky', 'age': 5}


# # Основные действия со словарем
#   получение элемента по ключу friend['name']
#   добавление значения friend['has_car'] = True
#   изменение значения friend['has_car'] = False
#   удаление значения del friend['age']
#   оператор in ('age' in friend)
# dog = {'name': 'Nick',
#        'age': 6,
#        }
# dog['surname'] = 'Lebovski'
# print(dog)
# del dog['age']
# print(dog)
# if 'age' in dog:
#     print('Есть возраст!')
# else:
#     print('Облом!ХА!!!')

# # Варианты перебора словаря
# по ключам
# for key in dog.keys():
#     print(key)
# for key in dog:
#     print(key)
# по значению
# for val in dog.values():
#     print(val)
# по парам ключ и значение
# for item in dog.items():
#     print(item)
# for val, key in dog.items():
#     print(val, key)


# # Множество set
#   Неупорядоченные коллекции, содержащие неповторяющиеся элементы
#   Во множестве не может быть двух одинаковых элементов
#   cities = {'London', 'Moscow', 'Paris'}


# # Действия со множествами
#   Добавление элемента cities.add('Burma')
#   Удаление элемента cities.remove('Moscow')
#   Длина множества len()
#   Оператор in, цикл for
#   Работа с несколькими множествами (объединение, пересечение, ...)


# # Операции со множествами
#   Объединение |
#   Пересечение &
#   Разность -
# max_things = {'Телефон', 'Бритва', 'Рубашка','Шорты'}
# kate_things = {'Телефон', 'Шорты', 'Зонтик', 'Помада'}
# # какие вещи взяли супруги
# print(max_things | kate_things)
# # какие вещи повторятся
# print(max_things & kate_things)
# # какие вещи взял Макс, но не взяла Кейт
# print(max_things - kate_things)
# # какие вещи взяла Кейт, но не взял Макс
# print(kate_things - max_things)


